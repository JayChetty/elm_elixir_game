var _user$project$Main$channelView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Success'),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$userEncoder = function (user) {
	var attributes = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: 'email',
			_1: _elm_lang$core$Json_Encode$string(user.email)
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'token',
				_1: _elm_lang$core$Json_Encode$string(user.token)
			},
			_1: {ctor: '[]'}
		}
	};
	return _elm_lang$core$Json_Encode$object(attributes);
};
var _user$project$Main$initPhxSocket = _fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
	_fbonetti$elm_phoenix_socket$Phoenix_Socket$init('ws://localhost:4000/socket/websocket'));
var _user$project$Main$Data = function (a) {
	return {user: a};
};
var _user$project$Main$User = F2(
	function (a, b) {
		return {email: a, token: b};
	});
var _user$project$Main$userDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'token',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'email',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$User)));
var _user$project$Main$dataDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'user',
	_user$project$Main$userDecoder,
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Data));
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {phxSocket: a, user: b, loginEmail: c, loginPassword: d};
	});
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$UpdatePassword = function (a) {
	return {ctor: 'UpdatePassword', _0: a};
};
var _user$project$Main$UpdateEmail = function (a) {
	return {ctor: 'UpdateEmail', _0: a};
};
var _user$project$Main$ShowJoinDataErrorMessage = function (a) {
	return {ctor: 'ShowJoinDataErrorMessage', _0: a};
};
var _user$project$Main$ReceiveMessage = function (a) {
	return {ctor: 'ReceiveMessage', _0: a};
};
var _user$project$Main$ShowLeftDataMessage = function (a) {
	return {ctor: 'ShowLeftDataMessage', _0: a};
};
var _user$project$Main$ShowJoinedDataMessage = function (a) {
	return {ctor: 'ShowJoinedDataMessage', _0: a};
};
var _user$project$Main$JoinDataChannel = {ctor: 'JoinDataChannel'};
var _user$project$Main$enterView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$placeholder('Username'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateEmail),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$placeholder('Password'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdatePassword),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$JoinDataChannel),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Enter'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$view = function (model) {
	var _p0 = model.user;
	if (_p0.ctor === 'Just') {
		return _user$project$Main$channelView(model);
	} else {
		return _user$project$Main$enterView(model);
	}
};
var _user$project$Main$JoinAuthChannel = {ctor: 'JoinAuthChannel'};
var _user$project$Main$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Main$joinAuthCommand = function (socket) {
	var channel = A2(
		_fbonetti$elm_phoenix_socket$Phoenix_Channel$onJoinError,
		_elm_lang$core$Basics$always(
			_user$project$Main$ShowJoinDataErrorMessage('auth:lobby')),
		A2(
			_fbonetti$elm_phoenix_socket$Phoenix_Channel$onClose,
			_elm_lang$core$Basics$always(
				_user$project$Main$ShowLeftDataMessage('auth:lobby')),
			A2(
				_fbonetti$elm_phoenix_socket$Phoenix_Channel$onJoin,
				_elm_lang$core$Basics$always(
					_user$project$Main$ShowJoinedDataMessage('auth:lobby')),
				_fbonetti$elm_phoenix_socket$Phoenix_Channel$init('auth:lobby'))));
	var _p1 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, channel, socket);
	var phxSocket = _p1._0;
	var phxCmd = _p1._1;
	var _p2 = A2(_elm_lang$core$Debug$log, 'UPDATE', 'Trying to join auth');
	return A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd);
};
var _user$project$Main$init = function () {
	var socket = _user$project$Main$initPhxSocket;
	return {
		ctor: '_Tuple2',
		_0: {user: _elm_lang$core$Maybe$Nothing, phxSocket: socket, loginEmail: '', loginPassword: ''},
		_1: _user$project$Main$joinAuthCommand(socket)
	};
}();
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'PhoenixMsg':
				var _p4 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p3._0, model.phxSocket);
				var phxSocket = _p4._0;
				var phxCmd = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
				};
			case 'JoinDataChannel':
				var _p5 = model.user;
				if (_p5.ctor === 'Just') {
					var channel = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Channel$onJoinError,
						_elm_lang$core$Basics$always(
							_user$project$Main$ShowJoinDataErrorMessage('room:lobby')),
						A2(
							_fbonetti$elm_phoenix_socket$Phoenix_Channel$onClose,
							_elm_lang$core$Basics$always(
								_user$project$Main$ShowLeftDataMessage('room:lobby')),
							A2(
								_fbonetti$elm_phoenix_socket$Phoenix_Channel$onJoin,
								_elm_lang$core$Basics$always(
									_user$project$Main$ShowJoinedDataMessage('room:lobby')),
								A2(
									_fbonetti$elm_phoenix_socket$Phoenix_Channel$withPayload,
									_user$project$Main$userEncoder(_p5._0),
									_fbonetti$elm_phoenix_socket$Phoenix_Channel$init('room:lobby')))));
					var _p6 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, channel, model.phxSocket);
					var phxSocket = _p6._0;
					var phxCmd = _p6._1;
					var _p7 = A2(_elm_lang$core$Debug$log, 'UPDATE', 'Trying to join data channel');
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{phxSocket: phxSocket}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'ShowJoinedDataMessage':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ShowJoinDataErrorMessage':
				var _p8 = A2(_elm_lang$core$Debug$log, 'JOIN ERROR MESSAGE', _p3._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ShowLeftDataMessage':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'JoinAuthChannel':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'ReceiveMessage':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdateEmail':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{loginEmail: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{loginPassword: _p3._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$subscriptions = function (model) {
	return A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$Main$PhoenixMsg);
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
